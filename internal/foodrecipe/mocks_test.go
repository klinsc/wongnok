// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package foodrecipe_test

import (
	"github.com/gin-gonic/gin"
	"github.com/klins/devpool/go-day6/wongnok/internal/model"
	"github.com/klins/devpool/go-day6/wongnok/internal/model/dto"
	mock "github.com/stretchr/testify/mock"
)

// NewMockIHandler creates a new instance of MockIHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIHandler {
	mock := &MockIHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIHandler is an autogenerated mock type for the IHandler type
type MockIHandler struct {
	mock.Mock
}

type MockIHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIHandler) EXPECT() *MockIHandler_Expecter {
	return &MockIHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIHandler
func (_mock *MockIHandler) Create(ctx *gin.Context) {
	_mock.Called(ctx)
	return
}

// MockIHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockIHandler_Expecter) Create(ctx interface{}) *MockIHandler_Create_Call {
	return &MockIHandler_Create_Call{Call: _e.mock.On("Create", ctx)}
}

func (_c *MockIHandler_Create_Call) Run(run func(ctx *gin.Context)) *MockIHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIHandler_Create_Call) Return() *MockIHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockIHandler_Create_Call) RunAndReturn(run func(ctx *gin.Context)) *MockIHandler_Create_Call {
	_c.Run(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIRepository
func (_mock *MockIRepository) Create(recipe *model.FoodRecipe) error {
	ret := _mock.Called(recipe)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*model.FoodRecipe) error); ok {
		r0 = returnFunc(recipe)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockIRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - recipe *model.FoodRecipe
func (_e *MockIRepository_Expecter) Create(recipe interface{}) *MockIRepository_Create_Call {
	return &MockIRepository_Create_Call{Call: _e.mock.On("Create", recipe)}
}

func (_c *MockIRepository_Create_Call) Run(run func(recipe *model.FoodRecipe)) *MockIRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.FoodRecipe
		if args[0] != nil {
			arg0 = args[0].(*model.FoodRecipe)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_Create_Call) Return(err error) *MockIRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockIRepository_Create_Call) RunAndReturn(run func(recipe *model.FoodRecipe) error) *MockIRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetAll() ([]model.FoodRecipe, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.FoodRecipe, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.FoodRecipe); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FoodRecipe)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockIRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockIRepository_Expecter) GetAll() *MockIRepository_GetAll_Call {
	return &MockIRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockIRepository_GetAll_Call) Run(run func()) *MockIRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRepository_GetAll_Call) Return(foodRecipes []model.FoodRecipe, err error) *MockIRepository_GetAll_Call {
	_c.Call.Return(foodRecipes, err)
	return _c
}

func (_c *MockIRepository_GetAll_Call) RunAndReturn(run func() ([]model.FoodRecipe, error)) *MockIRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIRepository
func (_mock *MockIRepository) GetByID(id string) (model.FoodRecipe, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.FoodRecipe, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.FoodRecipe); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockIRepository_Expecter) GetByID(id interface{}) *MockIRepository_GetByID_Call {
	return &MockIRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockIRepository_GetByID_Call) Run(run func(id string)) *MockIRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIRepository_GetByID_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIRepository_GetByID_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIRepository_GetByID_Call) RunAndReturn(run func(id string) (model.FoodRecipe, error)) *MockIRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIService creates a new instance of MockIService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIService {
	mock := &MockIService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIService is an autogenerated mock type for the IService type
type MockIService struct {
	mock.Mock
}

type MockIService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIService) EXPECT() *MockIService_Expecter {
	return &MockIService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockIService
func (_mock *MockIService) Create(request dto.FoodRecipeRequest) (model.FoodRecipe, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(dto.FoodRecipeRequest) (model.FoodRecipe, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(dto.FoodRecipeRequest) model.FoodRecipe); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(dto.FoodRecipeRequest) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockIService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - request dto.FoodRecipeRequest
func (_e *MockIService_Expecter) Create(request interface{}) *MockIService_Create_Call {
	return &MockIService_Create_Call{Call: _e.mock.On("Create", request)}
}

func (_c *MockIService_Create_Call) Run(run func(request dto.FoodRecipeRequest)) *MockIService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 dto.FoodRecipeRequest
		if args[0] != nil {
			arg0 = args[0].(dto.FoodRecipeRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_Create_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIService_Create_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIService_Create_Call) RunAndReturn(run func(request dto.FoodRecipeRequest) (model.FoodRecipe, error)) *MockIService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockIService
func (_mock *MockIService) GetAll() ([]model.FoodRecipe, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]model.FoodRecipe, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []model.FoodRecipe); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.FoodRecipe)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockIService_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockIService_Expecter) GetAll() *MockIService_GetAll_Call {
	return &MockIService_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockIService_GetAll_Call) Run(run func()) *MockIService_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIService_GetAll_Call) Return(foodRecipes []model.FoodRecipe, err error) *MockIService_GetAll_Call {
	_c.Call.Return(foodRecipes, err)
	return _c
}

func (_c *MockIService_GetAll_Call) RunAndReturn(run func() ([]model.FoodRecipe, error)) *MockIService_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockIService
func (_mock *MockIService) GetByID(id string) (model.FoodRecipe, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.FoodRecipe
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (model.FoodRecipe, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.FoodRecipe); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(model.FoodRecipe)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockIService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *MockIService_Expecter) GetByID(id interface{}) *MockIService_GetByID_Call {
	return &MockIService_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockIService_GetByID_Call) Run(run func(id string)) *MockIService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIService_GetByID_Call) Return(foodRecipe model.FoodRecipe, err error) *MockIService_GetByID_Call {
	_c.Call.Return(foodRecipe, err)
	return _c
}

func (_c *MockIService_GetByID_Call) RunAndReturn(run func(id string) (model.FoodRecipe, error)) *MockIService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}
